apiVersion: v1
kind: ConfigMap
metadata:
  name: simple-counter-html
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Simple Counter</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
                flex-direction: column;
                background-color: #f5f5f5;
                margin: 0;
                padding: 20px;
            }
            .connection-info {
                position: absolute;
                top: 10px;
                right: 10px;
                background: rgba(0,0,0,0.1);
                padding: 8px 12px;
                border-radius: 4px;
                font-size: 0.9rem;
            }
            .counter {
                font-size: 3rem;
                margin: 10px;
                color: #333;
            }
            .max-counter {
                font-size: 1.5rem;
                margin: 10px;
                color: #666;
            }
            .buttons {
                display: flex;
                flex-direction: column;
                align-items: center;
                margin-top: 20px;
            }
            button {
                padding: 12px 24px;
                font-size: 1.2rem;
                cursor: pointer;
                color: white;
                border: none;
                border-radius: 5px;
                transition: all 0.3s;
                margin: 5px;
                width: 200px;
            }
            #increment-btn {
                background-color: #4CAF50;
            }
            #increment-btn:hover {
                background-color: #45a049;
            }
            #reset-btn {
                background-color: #f44336;
            }
            #reset-btn:hover {
                background-color: #d32f2f;
            }
            .click-animation {
                transform: scale(0.95);
            }
        </style>
    </head>
    <body>
        <div class="connection-info" id="connectionInfo">
            Loading connection info...
        </div>
        <h1>Simple Counter</h1>
        <div class="counter" id="counter">0</div>
        <div class="max-counter" id="maxCounter">Max: 0</div>
        <div class="buttons">
            <button id="increment-btn">Click Me!</button>
            <button id="reset-btn">Reset Max Score</button>
        </div>

        <script>
            // Display connection info
            function displayConnectionInfo() {
                const protocol = window.location.protocol;
                const hostname = window.location.hostname;
                const port = window.location.port;
                const ip = hostname;
                
                document.getElementById('connectionInfo').textContent = 
                    `Pod: ${ip}${port ? ':' + port : ''}`;
            }

            // Initialize counters
            let count = 0;
            let maxCount = 0;
            const counterElement = document.getElementById('counter');
            const maxCounterElement = document.getElementById('maxCounter');
            const incrementButton = document.getElementById('increment-btn');
            const resetButton = document.getElementById('reset-btn');

            // Load max count from server
            async function loadMaxCount() {
                try {
                    const response = await fetch('/api/max-count');
                    if (response.ok) {
                        const data = await response.json();
                        maxCount = data.maxCount || 0;
                        maxCounterElement.textContent = `Max: ${maxCount}`;
                    }
                } catch (error) {
                    console.error('Failed to load max count:', error);
                }
            }

            // Save max count to server
            async function saveMaxCount() {
                try {
                    await fetch('/api/max-count', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ maxCount }),
                    });
                } catch (error) {
                    console.error('Failed to save max count:', error);
                }
            }

            // Reset max count
            async function resetMaxCount() {
                if (confirm('Are you sure you want to reset the max score?')) {
                    maxCount = 0;
                    maxCounterElement.textContent = `Max: ${maxCount}`;
                    await saveMaxCount();
                }
            }

            // Handle increment button click
            incrementButton.addEventListener('click', async () => {
                count++;
                counterElement.textContent = count;
                
                // Add click animation
                incrementButton.classList.add('click-animation');
                setTimeout(() => {
                    incrementButton.classList.remove('click-animation');
                }, 100);
                
                // Update max count if needed
                if (count > maxCount) {
                    maxCount = count;
                    maxCounterElement.textContent = `Max: ${maxCount}`;
                    await saveMaxCount();
                }
            });

            // Handle reset button click
            resetButton.addEventListener('click', resetMaxCount);

            // Initial setup
            window.addEventListener('load', () => {
                displayConnectionInfo();
                loadMaxCount();
            });
        </script>
    </body>
    </html>